<?php
/**
 * @file
 * Code for the GSB Content Tester
 */

require_once 'google-api-php-client/src/Google_Client.php';
require_once 'google-api-php-client/src/contrib/Google_DriveService.php';

class GSBContentTester {

  public $client_id = ''; 
  public $client_secret = '';
  public $redirect_uri = '';
  public $google_api_scopes = '';

  function GSBContentTester() {
    $this->client_id = variable_get('GSB_CONTENTTESTER_CLIENT_ID', '');
    $this->client_secret = variable_get('GSB_CONTENTTESTER_CLIENT_SECRET', '');
    $this->redirect_uri = variable_get('GSB_CONTENTTESTER_REDIRECT_URI', '');
    $this->google_api_scopes = array(variable_get('GSB_CONTENTTESTER_GOOGLE_API_SCOPE', ''));
  }

}

/**
 * Implements hook_menu().
 */
function gsb_content_tester_menu() {
  $items = array();
  $items['admin/config/gsb'] = array(
    'title' => 'GSB',
    'description' => 'Site-specific configuration.',
    'position' => 'left',
    'page callback' => 'system_admin_menu_block_page',
    'access arguments' => array('access administration pages'),
    'file' => 'system.admin.inc',
    'file path' => drupal_get_path('module', 'system'),
  );    
  $items['admin/config/gsb/gdrivetest'] = array(
    'title' => 'GDrive Test',
    'description' => 'Run the GDrive Test.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('gsb_content_tester_step1'),
    'access arguments' => array('access administration pages'),
  );
  $items['gdrivetest/oauth2callback'] = array(
    'title' => 'GDrive Test',
    'description' => 'Run the GDrive Test.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('gsb_content_tester_step2'),
    'access arguments' => array('access content tester pages'),
  );  
  return $items;
}

/**
 * Implementation of hook_permission().
 */
function gsb_content_tester_permission() {
  return array(
    'access content tester pages' => array(
      'title' => t('Access content tester page'),
      'description' => t('Access content tester page'),
    ),
  );
}

function gsb_content_tester_step1($form, &$form_state) {

  dpm('in gsb_content_tester_step1');

  $ct = new GSBContentTester();
  $client = new Google_Client();

  $client->setClientId($ct->client_id);
  $client->setClientSecret($ct->client_secret);
  $client->setRedirectUri($ct->redirect_uri);
  $client->setScopes($ct->google_api_scopes);

  $authUrl = $client->createAuthUrl();
  dpm($authUrl);   

  $form['authUrl'] = array(
    '#title' => t('Connect to GDrive'),
    '#markup' => "<a href='$authUrl'>Connect Me!</a>",
    '#type' => 'item',
  );

  return $form;  
}

function gsb_content_tester_step2($form, &$form_state) {

  if (isset($_GET['code'])) {  
    $code = $_GET['code'];
    $form['connected'] = array(
      '#title' => t('Connected to GDrive'),
      '#markup' => "code = $code",
      '#type' => 'item',
    );    
    $doc_data = _gsb_content_tester_getDoc($code, 'gdoctest');
    ob_start();
    var_dump($doc_data);
    $doc_data = ob_get_clean();
    $form['docdata'] = array(
      '#title' => t('Returned from GDrive'),
      '#markup' => "doc data = $doc_data",
      '#type' => 'item',
    );
  }  

  return $form;  
}

function _gsb_content_tester_getDoc($authCode, $doc_title) {

  $ret_data = array();

  $ct = new GSBContentTester();
  $client = new Google_Client();

  $client->setClientId($ct->client_id);
  $client->setClientSecret($ct->client_secret);
  $client->setRedirectUri($ct->redirect_uri);
  $client->setScopes($ct->google_api_scopes);

  $service = new Google_DriveService($client);

  // Exchange authorization code for access token
  $accessToken = $client->authenticate($authCode);
  $client->setAccessToken($accessToken);

  $files = $service->files;
  $list_files = $files->listFiles();

  foreach ($list_files['items'] as $key => $value) {
    $title = $value['title'];
    if ($title == $doc_title) {
      $id = $value['id'];
      $data = $service->files->get($value['id']);
      $file = new Google_DriveFile($data);
      $export_links = $file->getExportLinks();
      $csv_link = $export_links['application/pdf'];
      $csv_link = str_replace('=pdf', '=csv', $csv_link);
      $csv_data = _gsb_content_tester_downloadFile($csv_link);
      $temp = tmpfile();
      fwrite($temp, $csv_data);
      fseek($temp, 0);
      while (!feof($temp)){ 
        $line = fgetcsv($temp); 
        $ret_data[] = $line;
      } 
      fclose($temp);
      break;
    }
  }  

  return $ret_data;
}

function _gsb_content_tester_downloadFile($downloadUrl) {
  if ($downloadUrl) {
    $request = new Google_HttpRequest($downloadUrl, 'GET', null, null);
    $httpRequest = Google_Client::$io->authenticatedRequest($request);
    if ($httpRequest->getResponseHttpCode() == 200) {
      return $httpRequest->getResponseBody();
    }
  }
}

/*

function gsb_content_tester_old() {  

  global $user;

  $values = array(
    'type' => 'contenttester_test',
    'uid' => $user->uid,
    'status' => 1,
    'comment' => 1,
    'promote' => 0,
  );
  $node = entity_create('node', $values);

  dpm($node);

  $ewrapper = entity_metadata_wrapper('node', $node);

  dpm($ewrapper);

  $ewrapper->title->set('no title');

  $fred = 'field_course_code';

  $ewrapper->{$fred}->set('1010');

  $ewrapper->save();
}

*/
